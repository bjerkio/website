---
import type { WithContext, Thing } from 'schema-dts';
import '@fontsource-variable/sora';
import { jsonLd } from './json-ld';
import Header from '@components/header.astro';
import ContactFooter from '@components/contact-footer.astro';
import Footer from '@components/footer.astro';
import { ViewTransitions } from 'astro:transitions';

export type Props = {
  /**
   * The title of the page. The ideal length is approximately 60 characters.
   * When exceeding this limit, search engines will truncate the title.
   *
   * @default Bjerk
   */
  title?: string;

  /**
   * The description of the page. The ideal length is between 70 and 155 characters.
   * Minimum length is 70 characters. When exceeding this limit, search engines will
   * truncate the description.
   *
   * @default Default description
   */
  description?: string;

  /**
   * The headline on the page. The ideal length is approximately 47 characters.
   *
   * @default title
   */
  headline?: string;

  /**
   * The heading on the page next to headline. Should be longer than headline.
   *
   * @default title
   */
  heading?: string;

  /**
   * The heading on the page next to headline. Should be longer than headline.
   *
   * @default title
   */
  heading?: string;

  /**
   * The title for social media platforms. The ideal length is approximately 47 characters.
   * When exceeding this limit, platforms will truncate the title. LinkedIn will truncate
   * the title at 119 characters.
   *
   * @default Uses the title prop
   */
  socialMediaTitle?: string;

  /**
   * The description for social media platforms. Should not exceed 85 characters to fit most platforms.
   *
   * @default Uses the description prop
   */
  socialMediaDescription?: string;

  /**
   * Images for social media platforms. The ideal size is 1200 x 630 pixels.
   * When providing more than one image, the first image will be used, but some
   * platforms will allow the user to choose which image to use.
   *
   * @default ['/images/social-media-image.png']
   */
  images?: string[];

  /**
   * The type of the page.
   *
   * @default website
   */
  type?: "website" | "article";

  /**
   * The path of the page. Used to generate the canonical URL.
   */
  path?: string;

  /**
   * The date the page was published. Only used with type = 'article'.
   */
  articlePublishDate?: Date;

  /**
   * The date the page was last modified. Only used with type = 'article'.
   */
  articleAuthor?: string;

  /**
   * Set to false for pages that shouldn't have a contact form at the bottom.
   */
  contactFooter?: boolean;

  /**
   * JSON-LD structured data for the page.
   */
  schema?: WithContext<Thing> | WithContext<Thing>[];
};

const defaultDescription = `
  Bjerk er et dialogdrevet byrå innen digital produktutvikling og programvareutvikling. 
  De siste 12 årene har vi endret måten mennesker lærer, tenker, jobber, og kommuniserer
  innen eiendom, regnskap og forvaltning.
  `;

const defaultTitle = "Bjerk";

const defaultImage = new URL("/images/social-media-image.png", Astro.site);

const {
  title = defaultTitle,
  description = defaultDescription,
  socialMediaTitle = title ?? defaultTitle,
  socialMediaDescription = description ?? defaultDescription,
  images = [defaultImage.toString()],
  type = "website",
  path,
  schema,
  articleAuthor,
  articlePublishDate,
  contactFooter = true,
} = Astro.props;

// const parsedImages = images.map((image) => parseSocialMediaImage(image));
// const [image] = parsedImages;

const [image] = images;

const makeUrl = (newPath: string) => new URL(newPath, Astro.site).toString();

const canonical = new URL(path, Astro.site);
---

<html lang="nb">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href={makeUrl('favicon.svg')} />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href={makeUrl('favicon-16x16.png')}
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href={makeUrl('favicon-32x32.png')}
    />
    <link rel="shortcut icon" href={makeUrl('favicon.ico')} />
    <link rel="mask-icon" href={makeUrl('mask-icon.svg')} color="#FFFFFF" />
    <meta name="viewport" content="width=device-width" />
    <link type="text/plain" rel="author" href={makeUrl('humans.txt')} />
    <ViewTransitions />

    <title>{title}</title>
    <meta name="robots" content="index,follow" />
    <meta name="description" content={description} />
    {canonical && <link rel="canonical" href={canonical} />}

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={socialMediaTitle} />
    <meta name="twitter:description" content={socialMediaDescription} />
    <meta name="twitter:image" content={image} />

    <meta property="og:url" content={canonical} />
    <meta property="og:type" content={type} />
    <meta property="og:title" content={socialMediaTitle} />
    <meta property="og:description" content={socialMediaDescription} />
    {images.map(img => <meta property="og:image" content={img} />)}
    <meta property="og:site_name" content="Bjerk" />
    <script data-goatcounter="https://bjerk.goatcounter.com/count"
        async src="//gc.zgo.at/count.js"></script>

    {
      type == 'article' && articleAuthor && (
        <meta property="article:author" content={articleAuthor} />
      )
    }
    {
      type == 'article' && articlePublishDate && (
        <>
          <meta
            name="publish_date"
            property="og:publish_date"
            content={articlePublishDate.toISOString()}
          />
          <meta
            property="article:published_time"
            content={articlePublishDate.toISOString()}
          />
        </>
      )
    }

    {schema && <script type="application/ld+json" set:html={jsonLd(schema)} />}
  </head>
  <body>
    <Header />
    <slot />
    <ContactFooter />
    <Footer />
    <style is:global>
      :root {
        --color-light: var(--green20);
        --color-dark: var(--dark100);

        --green-base: 122 83%;
        --blue-base: 234 66%;

        --container-width: min(90ch, 100% - 4rem);

        /* Legacy color variables */
        --color-app-bg: white;
        --color-subtle-bg: hsl(var(--blue-base) 95%);
        --color-subtle-border: hsl(var(--blue-base) 95%);

        --border-radius: 0.25rem;
        --border-radius-sm: 0.125rem;
      }
      html {
        font-family:
          'Sora Variable',
          system-ui,
          -apple-system,
          sans-seri;
        font-size: 16px;
        line-height: 1.5;
        color: #1d1d1d;
        background-color: var(--color-light);

        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        font-feature-settings: 'kern', 'liga';
      }
      main {
        margin-bottom: 4rem;
      }

      body {
        margin: 0;
        overflow-y: scroll;
        background-color: var(--color-app-bg);
        -webkit-text-size-adjust: 100%;
        touch-action: manipulation;
        caret-color: hsl(var(--blue-base) 40%);
      }

      *,
      ::before,
      ::after {
        box-sizing: border-box;
      }

      ::selection {
        background: hsl(var(--blue-base) 90%);
        color: #1d1d1d;
      }

      .primary {
        font-size: 1rem;
        padding: 0.25rem 1rem;
        border-radius: 16px;
        border: solid;
        border-width: 2px;
        border-color: hsl(var(--green-base) 75%);
        text-decoration: none;
        background-color: white;
        width: fit-content;
      }
      .primary:hover {
        background-color: hsl(var(--green-base) 75%);
      }
      .primary:active {
        border-color: hsl(var(--green-base) 55%);
        background-color: hsl(var(--green-base) 55%);
      }

      body *::-webkit-scrollbar {
        background-color: hsl(var(--blue-base) 90%);
      }

      body *::-webkit-scrollbar-thumb {
        border-radius: 10px;
        background-color: hsl(var(--blue-base) 90%);
        border: 3px solid hsl(var(--blue-base) 90%);
      }

      body *::-webkit-scrollbar-thumb:hover {
        background-color: hsl(var(--blue-base) 90%);
      }

      p {
        margin-inline-end: 1em;
      }

      a {
        --link-color: hsl(var(--blue-base) 40%);

        color: var(--link-color);
        text-decoration-color: var(--link-color);
        text-decoration-skip-ink: none;
        text-decoration-thickness: 0.125em;
        text-underline-offset: 0.125em;
      }
      img {
        width: 100%;
        height: auto;
        aspect-ratio: auto;
      }

      input,
      textarea {
        width: auto;
        padding: 1em;
        resize: none;
        font-family:
          'Sora Variable',
          system-ui,
          -apple-system,
          sans-seri;
        transition: all 0.5s ease;
        max-width: 60ch;
        background-color: transparent;
      }
      input {
        border: none;
        border-block-end: 1px solid grey;
        padding: 16px 0;
      }
      textarea {
        border-radius: 8px;
      }
      textarea:focus,
      input:focus {
        background-color: hsl(var(--blue-base) 95%);
        padding: 16px 1em;
        background-color: white;
      }

      input,
      textarea {
        width: auto;
        padding: 1em;
        resize: none;
        font-family:
          'Sora Variable',
          system-ui,
          -apple-system,
          sans-seri;
        transition: all 0.5s ease;
        max-width: 60ch;
      }
      input {
        border: none;
        border-block-end: 1px solid grey;
        padding: 16px 0;
      }
      textarea {
        border-radius: 8px;
      }

      input:focus {
        background-color: hsl(var(--blue-base) 95%);
        padding: 16px 1em;
      }

      @media (hover) {
        a:hover {
          --link-color: hsl(var(--blue-base) 5%);
        }
      }

      a:focus-visible {
        outline-color: var(--link-color);
        outline-offset: 0.4em;
        border-radius: 0.225em;
      }
    </style>
  </body>
</html>